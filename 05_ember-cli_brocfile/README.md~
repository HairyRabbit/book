# ember-cli 添加依赖

接着上节的demo，现在我们使用[Bootstrap](http://getBootstrap.com)来美化界面。

## 安装 bs3

安装bs3方法很简单，通过bower安装就可以了：

```sh
bower install bootstrap
```

<img src="images/bs3_install.png" title="install bootstrap 3." />

如果和图片中的不太一样也没有关系，因为之前bs3的原因，已经缓存下来。如果是第一次安装应该会看到下载文件。

使用bower安装后会在`boser.json`挂上bootstrap的名字，文件会安装到`bower_components`文件夹中：

<img src="images/bs3_bower.png" title="bootstrap with bower.json." />

## 调教 broccoli

安装成功后需要把他导入项目里。具体要怎么做呢？我们知道项目是通过broccoli一路编译来的，思路就是在编译时加入bs3。打开`Brocfile.js`：

打开后发现里面有三行代码和大段注释。注释的大概意思就是要使用`app.import`导入依赖并输出。现在需要bs3的css文件，所以在注释下面加入：

```js
app.import('bower_components/bootstrap/dist/css/bootstrap.css');
```

接着启动项目，看看broccoli编译好的文件。编译完成后打开`dist/assets/vendor.css`，可以看到broccoli把bs3合并在了这个样式表里，并且在控制台里也能看到合并任务**Concat Vendor**：

<img src="images/bs3_broccoli.png" title="bootstrap with broccoli." />

好像有什么不对，bs3还有五个字体文件可能会用到。继续使用`app.import`导入：

```js
var bsPath = 'bower_components/bootstrap/';

app.import(bsPath + 'dist/css/bootstrap.css');

app.import(bsPath + 'fonts/glyphicons-halflings-regular.eot', {
  destDir: 'fonts'
});
app.import(bsPath + 'fonts/glyphicons-halflings-regular.svg', {
  destDir: 'fonts'
});
app.import(bsPath + 'fonts/glyphicons-halflings-regular.ttf', {
  destDir: 'fonts'
});
app.import(bsPath + 'fonts/glyphicons-halflings-regular.woff', {
  destDir: 'fonts'
});
app.import(bsPath + 'fonts/glyphicons-halflings-regular.woff2', {
  destDir: 'fonts'
});
```

打开`dist`，五个字体文件被放在`fonts`文件夹下。任务完成，不过我知道你一定看不下去了，如果有100个呢，也要这么做么？这时我们需要一个broccoli插件来帮助完成这个工作，使用npm安装**broccoli-funnel**：

```js
npm install broccoli-funnel --save-dev
```

将上面的代码改为：

```js
// Brocfile.js

var EmberApp = require('ember-cli/lib/broccoli/ember-app');
var Funnel = require('broccoli-funnel');

var app = new EmberApp();

var bowerPath = 'bower_components/';
var bsPath = bowerPath + 'bootstrap';

app.import(bsPath + '/dist/css/bootstrap.css');

var bsFonts = new Funnel(bsPath, {
  srcDir: '/fonts',
  include: ['**/*.*'],
  destDir: '/fonts'
});

module.exports = app.toTree(bsFonts);
```

重新启动服务，检查`dist`，发现所有的字体都导入在fonts文件夹下了。不过像这种万年不变的文件，可以直接复制到`public`文件夹里面。因为`public`文件夹下的文件是直接复制在了`dist`文件夹下，利用这个也可以实现刚才的效果，不过bs更新后还要重新复制。当然，图片是可以这么做的，我们在`public`新建一个`images`文件夹：

```sh
mkdir public/images
```

自动刷新后可以看到`images`被复制在`dist`下。

## 添加菜单

所需要的文件都准备好了，接下来开始美化工作。

首先要把**Welcome to Ember.js**去掉，他已经没用了。

```hbs
{{!-- app/templates/application.hbs --}}

{{outlet}}
```

把自动跳转到`/users`的钩子也去掉，因为也不需要了，删除`app/routes/index.js`的`beforeModel`：

```js
// app/routes/index.js

import Ember from 'ember';

export default Ember.Route.extend({

  beforeModel() {

  }
});
```

在`app/templates/application.hbs`添加头部：

```hbs
{{!-- app/templates/application.hbs --}}

{{!-- top --}}
<nav class="navbar navbar-inverse navbar-fixed-top">
  <div class="container-fluid">
  <div class="navbar-header">
    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
	  <span class="sr-only"></span>
	  <span class="icon-bar"></span>
	  <span class="icon-bar"></span>
	  <span class="icon-bar"></span>
	</button>
	{{#link-to 'index' class="navbar-brand"}}
	  <b>{{Aaa.name}}</b> - <span class="small">版本号: {{Aaa.version}}</span>
	{{/link-to}}
	</div>
  </div>
</nav>
```

固定在头部的导航栏需要给`body`加`padding`，修改样式表：

```css
// app/styles/app.css

.body {
  padding-top: 50px;
}

.navbar-fixed-top {
  border: 0;
}
```

然后添加侧边栏和菜单：

```hbs
{{!-- app/templates/application.hbs --}}

{{!-- top --}}
{{!-- 以上省略 --}}

{{!-- main --}}
<div class="container-fluid">
  <div class="row">
    {{!-- sidebar --}}
	<div class="col-sm-3 col-md-2 sidebar">
	  <ul class="nav sidebar__container">
	    <li class="active">
		  {{#link-to 'users'}}
		    <span class="glyphicon glyphicon-user"></span> 用户管理 <span class="sr-only"> </span>
		  {{/link-to}}
		</li>
	  </ul>
	</div>
	{{!-- body --}}
	<div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
	{{outlet}}
	</div>
  </div>
</div>
```

接着添加样式：

```css
// app/styles/app.css

.sidebar {
  display: none;
}
@media (min-width: 768px) {
  .sidebar {
    position: fixed;
	top: 51px;
	bottom: 0;
	left: 0;
	z-index: 1000;
	display: block;
	padding: 20px;
	overflow-x: hidden;
	overflow-y: auto;
	background-color: #f5f5f5;
	border-right: 1px solid #eee;
  }
}

.sidebar__container {
  margin-right: -21px;
  margin-bottom: 20px;
  margin-left: -20px;
}
  
.sidebar__container > li > a {
  padding-right: 20px;
  padding-left: 20px;
}
  
.sidebar__container > li > .active,
.sidebar__container > li > .active:hover,
.sidebar__container > li > .active:focus {
  color: #fff !important;
  background-color: #428bca !important;
}
```

页面自动刷新，感觉立刻就高大上了：

<img src="images/demo_index.png" title="demo with index." />

点击链接访问`/users`：

<img src="images/demo_user.png" title="demo with users." />

ember会为导航自动加上`active`样式。

## 修改用户管理模板

接下来为增删改查模板添加标题。首先打开用户列表模板：

```hbs
{{!-- app/templates/users/index.hbs --}}


```

